{"ast":null,"code":"// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// import API from \"../api/axios\";\n\n// export const loginUser = createAsyncThunk(\"auth/loginUser\", async (credentials, { rejectWithValue }) => {\n//     try {\n\n//         const response = await API.post(\"users/login/\", credentials);\n//         if (response.data.status !== \"success\") throw new Error(response.data.message || \"Login failed\");\n\n//         localStorage.setItem(\"access_token\", response.data.access_token);\n//         localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n\n//         return { user: response.data.user, token: response.data.access_token };\n//     } catch (error) {\n//         return rejectWithValue(error.response ? error.response.data.message : error.message);\n//     }\n// });\n\n// // Async action for registering a new user\n// export const registerUser = createAsyncThunk(\n//     \"auth/registerUser\",\n//     async (userData, { rejectWithValue }) => {\n//         try {\n//             const response = await API.post(\"api/auth/register/\", userData);\n\n//             if (response.data.status !== \"success\") {\n//                 throw new Error(response.data.message || \"Registration failed\");\n//             }\n\n//             return { user: response.data.user, token: response.data.access_token };\n//         } catch (error) {\n//             return rejectWithValue(error.response?.data.message || error.message);\n//         }\n//     }\n// );\n\n// const authSlice = createSlice({\n//     name: \"auth\",\n//     initialState: {\n//         user: JSON.parse(localStorage.getItem(\"user\")) || null,\n//         token: localStorage.getItem(\"access_token\") || null,\n//         loading: false,\n//         error: null,\n//     },\n//     reducers: {\n//         logout: (state) => {\n//             localStorage.removeItem(\"access_token\");\n//             localStorage.removeItem(\"user\");\n//             state.user = null;\n//             state.token = null;\n//         },\n//     },\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(loginUser.pending, (state) => {\n//                 state.loading = true;\n//                 state.error = null;\n//             })\n//             .addCase(loginUser.fulfilled, (state, action) => {\n//                 state.loading = false;\n//                 state.user = action.payload.user;\n//                 state.token = action.payload.token;\n//             })\n//             .addCase(loginUser.rejected, (state, action) => {\n//                 state.loading = false;\n//                 state.error = action.payload;\n//             });\n//     },\n// });\n\n// export const { logout } = authSlice.actions;\n// export default authSlice.reducer;","map":{"version":3,"names":[],"sources":["D:/MytaskFinal/frontend/src/redux/authSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import API from \"../api/axios\";\r\n\r\n// export const loginUser = createAsyncThunk(\"auth/loginUser\", async (credentials, { rejectWithValue }) => {\r\n//     try {\r\n\r\n//         const response = await API.post(\"users/login/\", credentials);\r\n//         if (response.data.status !== \"success\") throw new Error(response.data.message || \"Login failed\");\r\n\r\n//         localStorage.setItem(\"access_token\", response.data.access_token);\r\n//         localStorage.setItem(\"user\", JSON.stringify(response.data.user));\r\n\r\n//         return { user: response.data.user, token: response.data.access_token };\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response ? error.response.data.message : error.message);\r\n//     }\r\n// });\r\n\r\n\r\n\r\n\r\n// // Async action for registering a new user\r\n// export const registerUser = createAsyncThunk(\r\n//     \"auth/registerUser\",\r\n//     async (userData, { rejectWithValue }) => {\r\n//         try {\r\n//             const response = await API.post(\"api/auth/register/\", userData);\r\n\r\n//             if (response.data.status !== \"success\") {\r\n//                 throw new Error(response.data.message || \"Registration failed\");\r\n//             }\r\n\r\n//             return { user: response.data.user, token: response.data.access_token };\r\n//         } catch (error) {\r\n//             return rejectWithValue(error.response?.data.message || error.message);\r\n//         }\r\n//     }\r\n// );\r\n\r\n// const authSlice = createSlice({\r\n//     name: \"auth\",\r\n//     initialState: {\r\n//         user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n//         token: localStorage.getItem(\"access_token\") || null,\r\n//         loading: false,\r\n//         error: null,\r\n//     },\r\n//     reducers: {\r\n//         logout: (state) => {\r\n//             localStorage.removeItem(\"access_token\");\r\n//             localStorage.removeItem(\"user\");\r\n//             state.user = null;\r\n//             state.token = null;\r\n//         },\r\n//     },\r\n//     extraReducers: (builder) => {\r\n//         builder\r\n//             .addCase(loginUser.pending, (state) => {\r\n//                 state.loading = true;\r\n//                 state.error = null;\r\n//             })\r\n//             .addCase(loginUser.fulfilled, (state, action) => {\r\n//                 state.loading = false;\r\n//                 state.user = action.payload.user;\r\n//                 state.token = action.payload.token;\r\n//             })\r\n//             .addCase(loginUser.rejected, (state, action) => {\r\n//                 state.loading = false;\r\n//                 state.error = action.payload;\r\n//             });\r\n//     },\r\n// });\r\n\r\n// export const { logout } = authSlice.actions;\r\n// export default authSlice.reducer;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}